services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-stackoverflow_clone_dev}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DB_HOST: db
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-stackoverflow_clone_dev}
      DATABASE_URL: postgresql://postgres:postgres@db:5432/stackoverflow_clone_dev
      SECRET_KEY_BASE: ${SECRET_KEY_BASE:-supersecretkeythatshouldbegeneratedproperlyinproduction}
      PHX_HOST: ${PHX_HOST:-localhost}
      PORT: ${PORT:-4000}
      MIX_ENV: ${MIX_ENV:-dev}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OLLAMA_HOST: ${OLLAMA_HOST:-}
      OLLAMA_MODEL: ${OLLAMA_MODEL:-llama2}
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_deps:/app/deps
      - backend_build:/app/_build
    command: sh -c "mix ecto.create && mix ecto.migrate && mix phx.server"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      VITE_API_URL: http://localhost:4000/api
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev -- --host

volumes:
  postgres_data:
  backend_deps:
  backend_build:

